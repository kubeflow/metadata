// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeflow/metadata/ml_metadata (interfaces: MetadataStoreServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	ml_metadata "github.com/kubeflow/metadata/ml_metadata"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockMetadataStoreServiceClient is a mock of MetadataStoreServiceClient interface
type MockMetadataStoreServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataStoreServiceClientMockRecorder
}

// MockMetadataStoreServiceClientMockRecorder is the mock recorder for MockMetadataStoreServiceClient
type MockMetadataStoreServiceClientMockRecorder struct {
	mock *MockMetadataStoreServiceClient
}

// NewMockMetadataStoreServiceClient creates a new mock instance
func NewMockMetadataStoreServiceClient(ctrl *gomock.Controller) *MockMetadataStoreServiceClient {
	mock := &MockMetadataStoreServiceClient{ctrl: ctrl}
	mock.recorder = &MockMetadataStoreServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetadataStoreServiceClient) EXPECT() *MockMetadataStoreServiceClientMockRecorder {
	return m.recorder
}

// CompleteExecution mocks base method
func (m *MockMetadataStoreServiceClient) CompleteExecution(arg0 context.Context, arg1 *ml_metadata.CompleteExecutionRequest, arg2 ...grpc.CallOption) (*ml_metadata.CompleteExecutionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteExecution", varargs...)
	ret0, _ := ret[0].(*ml_metadata.CompleteExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteExecution indicates an expected call of CompleteExecution
func (mr *MockMetadataStoreServiceClientMockRecorder) CompleteExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteExecution", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).CompleteExecution), varargs...)
}

// Get mocks base method
func (m *MockMetadataStoreServiceClient) Get(arg0 context.Context, arg1 *ml_metadata.GetRequest, arg2 ...grpc.CallOption) (*ml_metadata.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*ml_metadata.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMetadataStoreServiceClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).Get), varargs...)
}

// GetAll mocks base method
func (m *MockMetadataStoreServiceClient) GetAll(arg0 context.Context, arg1 *ml_metadata.GetAllRequest, arg2 ...grpc.CallOption) (*ml_metadata.GetAllResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(*ml_metadata.GetAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockMetadataStoreServiceClientMockRecorder) GetAll(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetAll), varargs...)
}

// GetArtifactType mocks base method
func (m *MockMetadataStoreServiceClient) GetArtifactType(arg0 context.Context, arg1 *ml_metadata.GetArtifactTypeRequest, arg2 ...grpc.CallOption) (*ml_metadata.GetArtifactTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifactType", varargs...)
	ret0, _ := ret[0].(*ml_metadata.GetArtifactTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactType indicates an expected call of GetArtifactType
func (mr *MockMetadataStoreServiceClientMockRecorder) GetArtifactType(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactType", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetArtifactType), varargs...)
}

// GetArtifactTypesByID mocks base method
func (m *MockMetadataStoreServiceClient) GetArtifactTypesByID(arg0 context.Context, arg1 *ml_metadata.GetArtifactTypesByIDRequest, arg2 ...grpc.CallOption) (*ml_metadata.GetArtifactTypesByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifactTypesByID", varargs...)
	ret0, _ := ret[0].(*ml_metadata.GetArtifactTypesByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactTypesByID indicates an expected call of GetArtifactTypesByID
func (mr *MockMetadataStoreServiceClientMockRecorder) GetArtifactTypesByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactTypesByID", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetArtifactTypesByID), varargs...)
}

// GetArtifacts mocks base method
func (m *MockMetadataStoreServiceClient) GetArtifacts(arg0 context.Context, arg1 *ml_metadata.GetArtifactsRequest, arg2 ...grpc.CallOption) (*ml_metadata.GetArtifactsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifacts", varargs...)
	ret0, _ := ret[0].(*ml_metadata.GetArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifacts indicates an expected call of GetArtifacts
func (mr *MockMetadataStoreServiceClientMockRecorder) GetArtifacts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifacts", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetArtifacts), varargs...)
}

// GetArtifactsByID mocks base method
func (m *MockMetadataStoreServiceClient) GetArtifactsByID(arg0 context.Context, arg1 *ml_metadata.GetArtifactsByIDRequest, arg2 ...grpc.CallOption) (*ml_metadata.GetArtifactsByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifactsByID", varargs...)
	ret0, _ := ret[0].(*ml_metadata.GetArtifactsByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactsByID indicates an expected call of GetArtifactsByID
func (mr *MockMetadataStoreServiceClientMockRecorder) GetArtifactsByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactsByID", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetArtifactsByID), varargs...)
}

// GetArtifactsByType mocks base method
func (m *MockMetadataStoreServiceClient) GetArtifactsByType(arg0 context.Context, arg1 *ml_metadata.GetArtifactsByTypeRequest, arg2 ...grpc.CallOption) (*ml_metadata.GetArtifactsByTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifactsByType", varargs...)
	ret0, _ := ret[0].(*ml_metadata.GetArtifactsByTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactsByType indicates an expected call of GetArtifactsByType
func (mr *MockMetadataStoreServiceClientMockRecorder) GetArtifactsByType(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactsByType", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetArtifactsByType), varargs...)
}

// GetArtifactsByURI mocks base method
func (m *MockMetadataStoreServiceClient) GetArtifactsByURI(arg0 context.Context, arg1 *ml_metadata.GetArtifactsByURIRequest, arg2 ...grpc.CallOption) (*ml_metadata.GetArtifactsByURIResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifactsByURI", varargs...)
	ret0, _ := ret[0].(*ml_metadata.GetArtifactsByURIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactsByURI indicates an expected call of GetArtifactsByURI
func (mr *MockMetadataStoreServiceClientMockRecorder) GetArtifactsByURI(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactsByURI", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetArtifactsByURI), varargs...)
}

// GetEventsByArtifactIDs mocks base method
func (m *MockMetadataStoreServiceClient) GetEventsByArtifactIDs(arg0 context.Context, arg1 *ml_metadata.GetEventsByArtifactIDsRequest, arg2 ...grpc.CallOption) (*ml_metadata.GetEventsByArtifactIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventsByArtifactIDs", varargs...)
	ret0, _ := ret[0].(*ml_metadata.GetEventsByArtifactIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByArtifactIDs indicates an expected call of GetEventsByArtifactIDs
func (mr *MockMetadataStoreServiceClientMockRecorder) GetEventsByArtifactIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByArtifactIDs", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetEventsByArtifactIDs), varargs...)
}

// GetEventsByExecutionIDs mocks base method
func (m *MockMetadataStoreServiceClient) GetEventsByExecutionIDs(arg0 context.Context, arg1 *ml_metadata.GetEventsByExecutionIDsRequest, arg2 ...grpc.CallOption) (*ml_metadata.GetEventsByExecutionIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventsByExecutionIDs", varargs...)
	ret0, _ := ret[0].(*ml_metadata.GetEventsByExecutionIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByExecutionIDs indicates an expected call of GetEventsByExecutionIDs
func (mr *MockMetadataStoreServiceClientMockRecorder) GetEventsByExecutionIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByExecutionIDs", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetEventsByExecutionIDs), varargs...)
}

// GetExecutionType mocks base method
func (m *MockMetadataStoreServiceClient) GetExecutionType(arg0 context.Context, arg1 *ml_metadata.GetExecutionTypeRequest, arg2 ...grpc.CallOption) (*ml_metadata.GetExecutionTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionType", varargs...)
	ret0, _ := ret[0].(*ml_metadata.GetExecutionTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionType indicates an expected call of GetExecutionType
func (mr *MockMetadataStoreServiceClientMockRecorder) GetExecutionType(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionType", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetExecutionType), varargs...)
}

// GetExecutionTypesByID mocks base method
func (m *MockMetadataStoreServiceClient) GetExecutionTypesByID(arg0 context.Context, arg1 *ml_metadata.GetExecutionTypesByIDRequest, arg2 ...grpc.CallOption) (*ml_metadata.GetExecutionTypesByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionTypesByID", varargs...)
	ret0, _ := ret[0].(*ml_metadata.GetExecutionTypesByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionTypesByID indicates an expected call of GetExecutionTypesByID
func (mr *MockMetadataStoreServiceClientMockRecorder) GetExecutionTypesByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionTypesByID", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetExecutionTypesByID), varargs...)
}

// GetExecutions mocks base method
func (m *MockMetadataStoreServiceClient) GetExecutions(arg0 context.Context, arg1 *ml_metadata.GetExecutionsRequest, arg2 ...grpc.CallOption) (*ml_metadata.GetExecutionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutions", varargs...)
	ret0, _ := ret[0].(*ml_metadata.GetExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutions indicates an expected call of GetExecutions
func (mr *MockMetadataStoreServiceClientMockRecorder) GetExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutions", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetExecutions), varargs...)
}

// GetExecutionsByID mocks base method
func (m *MockMetadataStoreServiceClient) GetExecutionsByID(arg0 context.Context, arg1 *ml_metadata.GetExecutionsByIDRequest, arg2 ...grpc.CallOption) (*ml_metadata.GetExecutionsByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionsByID", varargs...)
	ret0, _ := ret[0].(*ml_metadata.GetExecutionsByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionsByID indicates an expected call of GetExecutionsByID
func (mr *MockMetadataStoreServiceClientMockRecorder) GetExecutionsByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionsByID", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetExecutionsByID), varargs...)
}

// GetExecutionsByType mocks base method
func (m *MockMetadataStoreServiceClient) GetExecutionsByType(arg0 context.Context, arg1 *ml_metadata.GetExecutionsByTypeRequest, arg2 ...grpc.CallOption) (*ml_metadata.GetExecutionsByTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionsByType", varargs...)
	ret0, _ := ret[0].(*ml_metadata.GetExecutionsByTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionsByType indicates an expected call of GetExecutionsByType
func (mr *MockMetadataStoreServiceClientMockRecorder) GetExecutionsByType(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionsByType", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).GetExecutionsByType), varargs...)
}

// MakeArtifactLive mocks base method
func (m *MockMetadataStoreServiceClient) MakeArtifactLive(arg0 context.Context, arg1 *ml_metadata.MakeArtifactLiveRequest, arg2 ...grpc.CallOption) (*ml_metadata.MakeArtifactLiveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MakeArtifactLive", varargs...)
	ret0, _ := ret[0].(*ml_metadata.MakeArtifactLiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeArtifactLive indicates an expected call of MakeArtifactLive
func (mr *MockMetadataStoreServiceClientMockRecorder) MakeArtifactLive(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeArtifactLive", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).MakeArtifactLive), varargs...)
}

// PutArtifactType mocks base method
func (m *MockMetadataStoreServiceClient) PutArtifactType(arg0 context.Context, arg1 *ml_metadata.PutArtifactTypeRequest, arg2 ...grpc.CallOption) (*ml_metadata.PutArtifactTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutArtifactType", varargs...)
	ret0, _ := ret[0].(*ml_metadata.PutArtifactTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutArtifactType indicates an expected call of PutArtifactType
func (mr *MockMetadataStoreServiceClientMockRecorder) PutArtifactType(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutArtifactType", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutArtifactType), varargs...)
}

// PutArtifacts mocks base method
func (m *MockMetadataStoreServiceClient) PutArtifacts(arg0 context.Context, arg1 *ml_metadata.PutArtifactsRequest, arg2 ...grpc.CallOption) (*ml_metadata.PutArtifactsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutArtifacts", varargs...)
	ret0, _ := ret[0].(*ml_metadata.PutArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutArtifacts indicates an expected call of PutArtifacts
func (mr *MockMetadataStoreServiceClientMockRecorder) PutArtifacts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutArtifacts", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutArtifacts), varargs...)
}

// PutEvents mocks base method
func (m *MockMetadataStoreServiceClient) PutEvents(arg0 context.Context, arg1 *ml_metadata.PutEventsRequest, arg2 ...grpc.CallOption) (*ml_metadata.PutEventsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEvents", varargs...)
	ret0, _ := ret[0].(*ml_metadata.PutEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEvents indicates an expected call of PutEvents
func (mr *MockMetadataStoreServiceClientMockRecorder) PutEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvents", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutEvents), varargs...)
}

// PutExecutionType mocks base method
func (m *MockMetadataStoreServiceClient) PutExecutionType(arg0 context.Context, arg1 *ml_metadata.PutExecutionTypeRequest, arg2 ...grpc.CallOption) (*ml_metadata.PutExecutionTypeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutExecutionType", varargs...)
	ret0, _ := ret[0].(*ml_metadata.PutExecutionTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutExecutionType indicates an expected call of PutExecutionType
func (mr *MockMetadataStoreServiceClientMockRecorder) PutExecutionType(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutExecutionType", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutExecutionType), varargs...)
}

// PutExecutions mocks base method
func (m *MockMetadataStoreServiceClient) PutExecutions(arg0 context.Context, arg1 *ml_metadata.PutExecutionsRequest, arg2 ...grpc.CallOption) (*ml_metadata.PutExecutionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutExecutions", varargs...)
	ret0, _ := ret[0].(*ml_metadata.PutExecutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutExecutions indicates an expected call of PutExecutions
func (mr *MockMetadataStoreServiceClientMockRecorder) PutExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutExecutions", reflect.TypeOf((*MockMetadataStoreServiceClient)(nil).PutExecutions), varargs...)
}
