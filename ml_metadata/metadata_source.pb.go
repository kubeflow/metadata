// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ml_metadata/proto/metadata_source.proto

package ml_metadata

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Contains supported metadata sources types in MetadataAccessObject.
type MetadataSourceType int32

const (
	MetadataSourceType_UNKNOWN_METADATA_SOURCE MetadataSourceType = 0
	// a fake in memory metadata_source for testing
	// DEPRECATED -- use SQLITE_METADATA_SOURCE instead.
	MetadataSourceType_FAKE_METADATA_SOURCE MetadataSourceType = 1
	// a MYSQL metadata source.
	MetadataSourceType_MYSQL_METADATA_SOURCE MetadataSourceType = 2
	// A Sqlite metadata source
	MetadataSourceType_SQLITE_METADATA_SOURCE MetadataSourceType = 3
)

var MetadataSourceType_name = map[int32]string{
	0: "UNKNOWN_METADATA_SOURCE",
	1: "FAKE_METADATA_SOURCE",
	2: "MYSQL_METADATA_SOURCE",
	3: "SQLITE_METADATA_SOURCE",
}
var MetadataSourceType_value = map[string]int32{
	"UNKNOWN_METADATA_SOURCE": 0,
	"FAKE_METADATA_SOURCE":    1,
	"MYSQL_METADATA_SOURCE":   2,
	"SQLITE_METADATA_SOURCE":  3,
}

func (x MetadataSourceType) String() string {
	return proto.EnumName(MetadataSourceType_name, int32(x))
}
func (MetadataSourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_metadata_source_83d294412be35e69, []int{0}
}

// A collection of returned records.
type RecordSet struct {
	// index-aligned column names for all records
	ColumnNames []string `protobuf:"bytes,1,rep,name=column_names,json=columnNames,proto3" json:"column_names,omitempty"`
	// a list of records returned by a query
	Records              []*RecordSet_Record `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RecordSet) Reset()         { *m = RecordSet{} }
func (m *RecordSet) String() string { return proto.CompactTextString(m) }
func (*RecordSet) ProtoMessage()    {}
func (*RecordSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_metadata_source_83d294412be35e69, []int{0}
}
func (m *RecordSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordSet.Unmarshal(m, b)
}
func (m *RecordSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordSet.Marshal(b, m, deterministic)
}
func (dst *RecordSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSet.Merge(dst, src)
}
func (m *RecordSet) XXX_Size() int {
	return xxx_messageInfo_RecordSet.Size(m)
}
func (m *RecordSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSet.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSet proto.InternalMessageInfo

func (m *RecordSet) GetColumnNames() []string {
	if m != nil {
		return m.ColumnNames
	}
	return nil
}

func (m *RecordSet) GetRecords() []*RecordSet_Record {
	if m != nil {
		return m.Records
	}
	return nil
}

// An individual record (e.g., row) returned by a MetadataSource.
// The record does not address the type conversion.
type RecordSet_Record struct {
	Values               []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecordSet_Record) Reset()         { *m = RecordSet_Record{} }
func (m *RecordSet_Record) String() string { return proto.CompactTextString(m) }
func (*RecordSet_Record) ProtoMessage()    {}
func (*RecordSet_Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_metadata_source_83d294412be35e69, []int{0, 0}
}
func (m *RecordSet_Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordSet_Record.Unmarshal(m, b)
}
func (m *RecordSet_Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordSet_Record.Marshal(b, m, deterministic)
}
func (dst *RecordSet_Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSet_Record.Merge(dst, src)
}
func (m *RecordSet_Record) XXX_Size() int {
	return xxx_messageInfo_RecordSet_Record.Size(m)
}
func (m *RecordSet_Record) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSet_Record.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSet_Record proto.InternalMessageInfo

func (m *RecordSet_Record) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// A config includes a set of SQL queries and the type of metadata source.
// It is used by MetadataAccessObject to init backend and issue queries.
// Next ID: 57
type MetadataSourceQueryConfig struct {
	// the type of the metadata source
	MetadataSourceType MetadataSourceType `protobuf:"varint,1,opt,name=metadata_source_type,json=metadataSourceType,proto3,enum=ml_metadata.MetadataSourceType" json:"metadata_source_type,omitempty"`
	// Drops the Type table.
	DropTypeTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,3,opt,name=drop_type_table,json=dropTypeTable,proto3" json:"drop_type_table,omitempty"`
	// Creates the Type table.
	CreateTypeTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,4,opt,name=create_type_table,json=createTypeTable,proto3" json:"create_type_table,omitempty"`
	// Checks the existence of the Type table.
	CheckTypeTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,44,opt,name=check_type_table,json=checkTypeTable,proto3" json:"check_type_table,omitempty"`
	// Inserts an artifact type into the Type table. It has 1 parameter.
	// $0 is the type name
	InsertArtifactType *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,54,opt,name=insert_artifact_type,json=insertArtifactType,proto3" json:"insert_artifact_type,omitempty"`
	// Inserts an execution type into the Type table. It has 3 parameters.
	// $0 is the type name
	// $1 is the input_type serialized as JSON or null.
	// $2 is the output_type serialized as JSON or null.
	InsertExecutionType *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,55,opt,name=insert_execution_type,json=insertExecutionType,proto3" json:"insert_execution_type,omitempty"`
	// Queries a type by its type id. It has 2 parameter.
	// $0 is the type id
	// $1 is the is_artifact_type
	SelectTypeById *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,6,opt,name=select_type_by_id,json=selectTypeById,proto3" json:"select_type_by_id,omitempty"`
	// Queries a type by its type name. It has 2 parameter.
	// $0 is the type name
	// $1 is the is_artifact_type
	SelectTypeByName *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,20,opt,name=select_type_by_name,json=selectTypeByName,proto3" json:"select_type_by_name,omitempty"`
	// Drops the TypeProperty table.
	DropTypePropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,7,opt,name=drop_type_property_table,json=dropTypePropertyTable,proto3" json:"drop_type_property_table,omitempty"`
	// Creates the TypeProperty table.
	CreateTypePropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,8,opt,name=create_type_property_table,json=createTypePropertyTable,proto3" json:"create_type_property_table,omitempty"`
	// Checks the existence of the TypeProperty table.
	CheckTypePropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,45,opt,name=check_type_property_table,json=checkTypePropertyTable,proto3" json:"check_type_property_table,omitempty"`
	// Inserts a property of a type into the TypeProperty table. It has 3
	// parameters.
	// $0 is the type_id
	// $1 is the name of the property
	// $2 is the data_type of the property
	InsertTypeProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,9,opt,name=insert_type_property,json=insertTypeProperty,proto3" json:"insert_type_property,omitempty"`
	// Queries properties of a type from the TypeProperty table by the type_id
	// Returns a list of properties (name, data_type). It has 1 parameter.
	// $0 is the type_id
	SelectPropertyByTypeId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,10,opt,name=select_property_by_type_id,json=selectPropertyByTypeId,proto3" json:"select_property_by_type_id,omitempty"`
	// Queries the last inserted id.
	SelectLastInsertId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,11,opt,name=select_last_insert_id,json=selectLastInsertId,proto3" json:"select_last_insert_id,omitempty"`
	// Drops the Artifact table.
	DropArtifactTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,12,opt,name=drop_artifact_table,json=dropArtifactTable,proto3" json:"drop_artifact_table,omitempty"`
	// Creates the Artifact table.
	CreateArtifactTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,13,opt,name=create_artifact_table,json=createArtifactTable,proto3" json:"create_artifact_table,omitempty"`
	// Checks the existence of the Artifact table.
	CheckArtifactTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,46,opt,name=check_artifact_table,json=checkArtifactTable,proto3" json:"check_artifact_table,omitempty"`
	// Inserts an artifact into the Artifact table. It has 2 parameters.
	// $0 is the type_id
	// $1 is the uri of the Artifact
	InsertArtifact *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,14,opt,name=insert_artifact,json=insertArtifact,proto3" json:"insert_artifact,omitempty"`
	// Queries an artifact from the Artifact table by its id. It has 1 parameter.
	// $0 is the artifact_id
	SelectArtifactById *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,15,opt,name=select_artifact_by_id,json=selectArtifactById,proto3" json:"select_artifact_by_id,omitempty"`
	// Queries an artifact from the Artifact table by its type_id. It has 1
	// parameter.
	// $0 is the artifact_type_id
	SelectArtifactsByTypeId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,52,opt,name=select_artifacts_by_type_id,json=selectArtifactsByTypeId,proto3" json:"select_artifacts_by_type_id,omitempty"`
	// Queries an artifact from the Artifact table by its uri. It has 1 parameter.
	// $0 is the uri
	SelectArtifactsByUri *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,56,opt,name=select_artifacts_by_uri,json=selectArtifactsByUri,proto3" json:"select_artifacts_by_uri,omitempty"`
	// Updates an artifact in the Artifact table. It has 3 parameters.
	// $0 is the existing artifact id
	// $1 is the type_id
	// $2 is the uri of the Artifact
	UpdateArtifact *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,21,opt,name=update_artifact,json=updateArtifact,proto3" json:"update_artifact,omitempty"`
	// Drops the ArtifactProperty table.
	DropArtifactPropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,16,opt,name=drop_artifact_property_table,json=dropArtifactPropertyTable,proto3" json:"drop_artifact_property_table,omitempty"`
	// Creates the ArtifactProperty table.
	CreateArtifactPropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,17,opt,name=create_artifact_property_table,json=createArtifactPropertyTable,proto3" json:"create_artifact_property_table,omitempty"`
	// Checks the existence of the ArtifactProperty table.
	CheckArtifactPropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,47,opt,name=check_artifact_property_table,json=checkArtifactPropertyTable,proto3" json:"check_artifact_property_table,omitempty"`
	// Insert a property of an artifact from the ArtifactProperty table. It has 5
	// parameters.
	// $0 is the property data type
	// $1 is the artifact_id
	// $2 is the name of the artifact property
	// $3 is the flag to indicate whether it is a custom property
	// $4 is the value of the property
	InsertArtifactProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,18,opt,name=insert_artifact_property,json=insertArtifactProperty,proto3" json:"insert_artifact_property,omitempty"`
	// Queries properties of an artifact from the ArtifactProperty table by the
	// artifact id. It has 1 parameter.
	// $0 is the artifact_id
	SelectArtifactPropertyByArtifactId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,19,opt,name=select_artifact_property_by_artifact_id,json=selectArtifactPropertyByArtifactId,proto3" json:"select_artifact_property_by_artifact_id,omitempty"`
	// Updates a property of an artifact in the ArtifactProperty table. It has 4
	// parameters.
	// $0 is the property data type
	// $1 is the value of the property
	// $2 is the artifact_id
	// $3 is the name of the artifact property
	UpdateArtifactProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,22,opt,name=update_artifact_property,json=updateArtifactProperty,proto3" json:"update_artifact_property,omitempty"`
	// Deletes a property of an artifact. It has 2 parameters.
	// $0 is the artifact_id
	// $1 is the name of the artifact property
	DeleteArtifactProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,23,opt,name=delete_artifact_property,json=deleteArtifactProperty,proto3" json:"delete_artifact_property,omitempty"`
	// Drops the Execution table.
	DropExecutionTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,24,opt,name=drop_execution_table,json=dropExecutionTable,proto3" json:"drop_execution_table,omitempty"`
	// Creates the Execution table.
	CreateExecutionTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,25,opt,name=create_execution_table,json=createExecutionTable,proto3" json:"create_execution_table,omitempty"`
	// Checks the existence of the Execution table.
	CheckExecutionTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,48,opt,name=check_execution_table,json=checkExecutionTable,proto3" json:"check_execution_table,omitempty"`
	// Inserts an execution into the Execution table. It has 1 parameter.
	// $0 is the type_id
	InsertExecution *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,28,opt,name=insert_execution,json=insertExecution,proto3" json:"insert_execution,omitempty"`
	// Queries an execution from the Execution table by its id. It has 1
	// parameter.
	// $0 is the execution_id
	SelectExecutionById *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,29,opt,name=select_execution_by_id,json=selectExecutionById,proto3" json:"select_execution_by_id,omitempty"`
	// Queries an execution from the Execution table by its type_id. It has 1
	// parameter.
	// $0 is the execution_type_id
	SelectExecutionsByTypeId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,53,opt,name=select_executions_by_type_id,json=selectExecutionsByTypeId,proto3" json:"select_executions_by_type_id,omitempty"`
	// Updates an execution in the Execution table. It has 2 parameters.
	// $0 is the existing execution id
	// $1 is the type_id
	UpdateExecution *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,34,opt,name=update_execution,json=updateExecution,proto3" json:"update_execution,omitempty"`
	// Drops the ExecutionProperty table.
	DropExecutionPropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,26,opt,name=drop_execution_property_table,json=dropExecutionPropertyTable,proto3" json:"drop_execution_property_table,omitempty"`
	// Creates the ExecutionProperty table.
	CreateExecutionPropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,27,opt,name=create_execution_property_table,json=createExecutionPropertyTable,proto3" json:"create_execution_property_table,omitempty"`
	// Checks the existence of the ExecutionProperty table.
	CheckExecutionPropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,49,opt,name=check_execution_property_table,json=checkExecutionPropertyTable,proto3" json:"check_execution_property_table,omitempty"`
	// Insert a property of an execution from the ExecutionProperty table. It has
	// 5 parameters.
	// $0 is the property data type
	// $1 is the execution_id
	// $2 is the name of the execution property
	// $3 is the flag to indicate whether it is a custom property
	// $4 is the value of the property
	InsertExecutionProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,30,opt,name=insert_execution_property,json=insertExecutionProperty,proto3" json:"insert_execution_property,omitempty"`
	// Queries properties of an execution from the ExecutionProperty table by the
	// execution id. It has 1 parameter.
	// $0 is the execution_id
	SelectExecutionPropertyByExecutionId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,31,opt,name=select_execution_property_by_execution_id,json=selectExecutionPropertyByExecutionId,proto3" json:"select_execution_property_by_execution_id,omitempty"`
	// Updates a property of an execution in the ExecutionProperty table. It has 4
	// parameters.
	// $0 is the property data type
	// $1 is the value of the property
	// $2 is the execution_id
	// $3 is the name of the execution property
	UpdateExecutionProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,32,opt,name=update_execution_property,json=updateExecutionProperty,proto3" json:"update_execution_property,omitempty"`
	// Deletes a property of an execution. It has 2 parameters.
	// $0 is the execution_id
	// $1 is the name of the execution property
	DeleteExecutionProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,33,opt,name=delete_execution_property,json=deleteExecutionProperty,proto3" json:"delete_execution_property,omitempty"`
	// Drops the Event table.
	DropEventTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,35,opt,name=drop_event_table,json=dropEventTable,proto3" json:"drop_event_table,omitempty"`
	// Creates the Event table.
	CreateEventTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,36,opt,name=create_event_table,json=createEventTable,proto3" json:"create_event_table,omitempty"`
	// Checks the existence of the Event table.
	CheckEventTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,50,opt,name=check_event_table,json=checkEventTable,proto3" json:"check_event_table,omitempty"`
	// Inserts an event into the Event table. It has 4 parameters.
	// $0 is the artifact_id
	// $1 is the execution_id
	// $2 is the event type
	// $3 is the event time
	// TODO(huimiao) support insert path context as blob
	InsertEvent *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,37,opt,name=insert_event,json=insertEvent,proto3" json:"insert_event,omitempty"`
	// Queries events from the Event table by its artifact id. It has 1 parameter.
	// $0 is the artifact_id
	SelectEventByArtifactId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,38,opt,name=select_event_by_artifact_id,json=selectEventByArtifactId,proto3" json:"select_event_by_artifact_id,omitempty"`
	// Queries events from the Event table by its execution id. It has 1
	// parameter.
	// $0 is the execution_id
	SelectEventByExecutionId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,39,opt,name=select_event_by_execution_id,json=selectEventByExecutionId,proto3" json:"select_event_by_execution_id,omitempty"`
	// Drops the EventPath table.
	DropEventPathTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,40,opt,name=drop_event_path_table,json=dropEventPathTable,proto3" json:"drop_event_path_table,omitempty"`
	// Creates the EventPath table.
	CreateEventPathTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,41,opt,name=create_event_path_table,json=createEventPathTable,proto3" json:"create_event_path_table,omitempty"`
	// Checks the existence of the EventPath table.
	CheckEventPathTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,51,opt,name=check_event_path_table,json=checkEventPathTable,proto3" json:"check_event_path_table,omitempty"`
	// Inserts a path into the EventPath table. It has 4 parameters
	// $0 is the event_id
	// $1 is the step value case, either index or key
	// $2 is the is_index_step indicates the step value case
	// $3 is the value of the step
	InsertEventPath *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,42,opt,name=insert_event_path,json=insertEventPath,proto3" json:"insert_event_path,omitempty"`
	// Queries paths from the EventPath table. It has 1 parameter.
	// $0 is the event_i
	SelectEventPathByEventId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,43,opt,name=select_event_path_by_event_id,json=selectEventPathByEventId,proto3" json:"select_event_path_by_event_id,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                                 `json:"-"`
	XXX_unrecognized         []byte                                   `json:"-"`
	XXX_sizecache            int32                                    `json:"-"`
}

func (m *MetadataSourceQueryConfig) Reset()         { *m = MetadataSourceQueryConfig{} }
func (m *MetadataSourceQueryConfig) String() string { return proto.CompactTextString(m) }
func (*MetadataSourceQueryConfig) ProtoMessage()    {}
func (*MetadataSourceQueryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_metadata_source_83d294412be35e69, []int{1}
}
func (m *MetadataSourceQueryConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetadataSourceQueryConfig.Unmarshal(m, b)
}
func (m *MetadataSourceQueryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetadataSourceQueryConfig.Marshal(b, m, deterministic)
}
func (dst *MetadataSourceQueryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataSourceQueryConfig.Merge(dst, src)
}
func (m *MetadataSourceQueryConfig) XXX_Size() int {
	return xxx_messageInfo_MetadataSourceQueryConfig.Size(m)
}
func (m *MetadataSourceQueryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataSourceQueryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataSourceQueryConfig proto.InternalMessageInfo

func (m *MetadataSourceQueryConfig) GetMetadataSourceType() MetadataSourceType {
	if m != nil {
		return m.MetadataSourceType
	}
	return MetadataSourceType_UNKNOWN_METADATA_SOURCE
}

func (m *MetadataSourceQueryConfig) GetDropTypeTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.DropTypeTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCreateTypeTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CreateTypeTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCheckTypeTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CheckTypeTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetInsertArtifactType() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.InsertArtifactType
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetInsertExecutionType() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.InsertExecutionType
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetSelectTypeById() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.SelectTypeById
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetSelectTypeByName() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.SelectTypeByName
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetDropTypePropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.DropTypePropertyTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCreateTypePropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CreateTypePropertyTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCheckTypePropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CheckTypePropertyTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetInsertTypeProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.InsertTypeProperty
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetSelectPropertyByTypeId() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.SelectPropertyByTypeId
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetSelectLastInsertId() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.SelectLastInsertId
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetDropArtifactTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.DropArtifactTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCreateArtifactTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CreateArtifactTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCheckArtifactTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CheckArtifactTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetInsertArtifact() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.InsertArtifact
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetSelectArtifactById() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.SelectArtifactById
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetSelectArtifactsByTypeId() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.SelectArtifactsByTypeId
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetSelectArtifactsByUri() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.SelectArtifactsByUri
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetUpdateArtifact() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.UpdateArtifact
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetDropArtifactPropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.DropArtifactPropertyTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCreateArtifactPropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CreateArtifactPropertyTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCheckArtifactPropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CheckArtifactPropertyTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetInsertArtifactProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.InsertArtifactProperty
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetSelectArtifactPropertyByArtifactId() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.SelectArtifactPropertyByArtifactId
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetUpdateArtifactProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.UpdateArtifactProperty
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetDeleteArtifactProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.DeleteArtifactProperty
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetDropExecutionTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.DropExecutionTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCreateExecutionTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CreateExecutionTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCheckExecutionTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CheckExecutionTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetInsertExecution() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.InsertExecution
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetSelectExecutionById() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.SelectExecutionById
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetSelectExecutionsByTypeId() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.SelectExecutionsByTypeId
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetUpdateExecution() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.UpdateExecution
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetDropExecutionPropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.DropExecutionPropertyTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCreateExecutionPropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CreateExecutionPropertyTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCheckExecutionPropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CheckExecutionPropertyTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetInsertExecutionProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.InsertExecutionProperty
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetSelectExecutionPropertyByExecutionId() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.SelectExecutionPropertyByExecutionId
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetUpdateExecutionProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.UpdateExecutionProperty
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetDeleteExecutionProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.DeleteExecutionProperty
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetDropEventTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.DropEventTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCreateEventTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CreateEventTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCheckEventTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CheckEventTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetInsertEvent() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.InsertEvent
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetSelectEventByArtifactId() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.SelectEventByArtifactId
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetSelectEventByExecutionId() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.SelectEventByExecutionId
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetDropEventPathTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.DropEventPathTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCreateEventPathTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CreateEventPathTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetCheckEventPathTable() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.CheckEventPathTable
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetInsertEventPath() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.InsertEventPath
	}
	return nil
}

func (m *MetadataSourceQueryConfig) GetSelectEventPathByEventId() *MetadataSourceQueryConfig_TemplateQuery {
	if m != nil {
		return m.SelectEventPathByEventId
	}
	return nil
}

// Template of a SQL query, which can contain parameterized variables using
// $0, $1, ... $9.
// For instance:
//    query: "select * from foo where bar = $0"
//    parameter_num: 1
type MetadataSourceQueryConfig_TemplateQuery struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	ParameterNum         int32    `protobuf:"varint,2,opt,name=parameter_num,json=parameterNum,proto3" json:"parameter_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetadataSourceQueryConfig_TemplateQuery) Reset() {
	*m = MetadataSourceQueryConfig_TemplateQuery{}
}
func (m *MetadataSourceQueryConfig_TemplateQuery) String() string { return proto.CompactTextString(m) }
func (*MetadataSourceQueryConfig_TemplateQuery) ProtoMessage()    {}
func (*MetadataSourceQueryConfig_TemplateQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_metadata_source_83d294412be35e69, []int{1, 0}
}
func (m *MetadataSourceQueryConfig_TemplateQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetadataSourceQueryConfig_TemplateQuery.Unmarshal(m, b)
}
func (m *MetadataSourceQueryConfig_TemplateQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetadataSourceQueryConfig_TemplateQuery.Marshal(b, m, deterministic)
}
func (dst *MetadataSourceQueryConfig_TemplateQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataSourceQueryConfig_TemplateQuery.Merge(dst, src)
}
func (m *MetadataSourceQueryConfig_TemplateQuery) XXX_Size() int {
	return xxx_messageInfo_MetadataSourceQueryConfig_TemplateQuery.Size(m)
}
func (m *MetadataSourceQueryConfig_TemplateQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataSourceQueryConfig_TemplateQuery.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataSourceQueryConfig_TemplateQuery proto.InternalMessageInfo

func (m *MetadataSourceQueryConfig_TemplateQuery) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *MetadataSourceQueryConfig_TemplateQuery) GetParameterNum() int32 {
	if m != nil {
		return m.ParameterNum
	}
	return 0
}

func init() {
	proto.RegisterType((*RecordSet)(nil), "ml_metadata.RecordSet")
	proto.RegisterType((*RecordSet_Record)(nil), "ml_metadata.RecordSet.Record")
	proto.RegisterType((*MetadataSourceQueryConfig)(nil), "ml_metadata.MetadataSourceQueryConfig")
	proto.RegisterType((*MetadataSourceQueryConfig_TemplateQuery)(nil), "ml_metadata.MetadataSourceQueryConfig.TemplateQuery")
	proto.RegisterEnum("ml_metadata.MetadataSourceType", MetadataSourceType_name, MetadataSourceType_value)
}

func init() {
	proto.RegisterFile("ml_metadata/proto/metadata_source.proto", fileDescriptor_metadata_source_83d294412be35e69)
}

var fileDescriptor_metadata_source_83d294412be35e69 = []byte{
	// 1240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x99, 0xdb, 0x53, 0xdb, 0xc6,
	0x17, 0xc7, 0x7f, 0x86, 0x5f, 0x48, 0x39, 0xe6, 0x62, 0x2f, 0xb6, 0x59, 0x1b, 0x08, 0x0e, 0x49,
	0x8b, 0x93, 0xb6, 0xa6, 0x25, 0x69, 0xd3, 0x57, 0x48, 0xe9, 0x8c, 0x1b, 0x20, 0xc1, 0x98, 0xc9,
	0x74, 0xa6, 0x8d, 0x10, 0xd6, 0x02, 0x2a, 0xbe, 0x28, 0xb2, 0x94, 0xd4, 0xd3, 0xb7, 0xbe, 0xe5,
	0xa1, 0xff, 0x58, 0xff, 0xaa, 0xce, 0x5e, 0x24, 0xed, 0xae, 0x98, 0xbe, 0x1c, 0xde, 0xac, 0x45,
	0xf9, 0x7e, 0x74, 0x76, 0xbf, 0xe7, 0x22, 0x05, 0xb6, 0x87, 0x03, 0x67, 0xc8, 0x22, 0xd7, 0x73,
	0x23, 0x77, 0x27, 0x08, 0xc7, 0xd1, 0x78, 0x27, 0xb9, 0x74, 0x26, 0xe3, 0x38, 0xec, 0xb3, 0xb6,
	0x58, 0x25, 0x45, 0xed, 0xc6, 0xad, 0x4f, 0x05, 0x98, 0xef, 0xb2, 0xfe, 0x38, 0xf4, 0x4e, 0x59,
	0x44, 0x1e, 0xc2, 0x42, 0x7f, 0x3c, 0x88, 0x87, 0x23, 0x67, 0xe4, 0x0e, 0xd9, 0x84, 0x16, 0x9a,
	0xb3, 0xad, 0xf9, 0x6e, 0x51, 0xae, 0x1d, 0xf3, 0x25, 0xf2, 0x02, 0xee, 0x87, 0xe2, 0xfe, 0x09,
	0x9d, 0x69, 0xce, 0xb6, 0x8a, 0xbb, 0x1b, 0x6d, 0x4d, 0xaf, 0x9d, 0x6a, 0xa9, 0x5f, 0xdd, 0xe4,
	0xee, 0x46, 0x13, 0xe6, 0xe4, 0x12, 0xa9, 0xc1, 0xdc, 0x07, 0x77, 0x10, 0xa7, 0xfa, 0xea, 0x6a,
	0xeb, 0x9f, 0x36, 0xd4, 0x8f, 0x94, 0xd0, 0xa9, 0x78, 0xe2, 0x93, 0x98, 0x85, 0xd3, 0x97, 0xe3,
	0xd1, 0xa5, 0x7f, 0x45, 0x4e, 0xa0, 0x62, 0xc5, 0xe3, 0x44, 0xd3, 0x80, 0xd1, 0x42, 0xb3, 0xd0,
	0x5a, 0xda, 0xdd, 0x34, 0x9e, 0xc2, 0x54, 0xe9, 0x4d, 0x03, 0xd6, 0x25, 0xc3, 0xdc, 0x1a, 0xf9,
	0x15, 0x96, 0xbd, 0x70, 0x1c, 0x08, 0x1d, 0x27, 0x72, 0x2f, 0x06, 0x8c, 0xce, 0x36, 0x0b, 0xad,
	0xe2, 0xee, 0xf3, 0xff, 0x50, 0xd3, 0x9e, 0xa9, 0xdd, 0x63, 0xc3, 0x60, 0xe0, 0x46, 0x72, 0xad,
	0xbb, 0xc8, 0xc5, 0xb8, 0x70, 0x8f, 0x4b, 0x91, 0x73, 0x28, 0xf7, 0x43, 0xe6, 0x46, 0x4c, 0xd7,
	0xff, 0x3f, 0x42, 0x7f, 0x59, 0xca, 0x65, 0x84, 0x77, 0x50, 0xea, 0x5f, 0xb3, 0xfe, 0x8d, 0x0e,
	0xf8, 0x0a, 0x01, 0x58, 0x12, 0x6a, 0x99, 0xfe, 0x25, 0x54, 0xfc, 0xd1, 0x84, 0x85, 0x91, 0xe3,
	0x86, 0x91, 0x7f, 0xe9, 0xf6, 0x23, 0xb9, 0xe5, 0xdf, 0x23, 0x18, 0x44, 0x2a, 0xee, 0x29, 0x41,
	0x71, 0x0e, 0xd7, 0x50, 0x55, 0x1c, 0xf6, 0x07, 0xeb, 0xc7, 0x91, 0x3f, 0x1e, 0x49, 0xd0, 0x0b,
	0x04, 0x68, 0x45, 0x4a, 0x1e, 0x24, 0x8a, 0x82, 0xe4, 0x40, 0x79, 0xc2, 0x06, 0x4c, 0x05, 0xe2,
	0x5c, 0x4c, 0x1d, 0xdf, 0xa3, 0x73, 0x98, 0x2d, 0x93, 0x72, 0x5c, 0x7c, 0x7f, 0xda, 0xf1, 0x48,
	0x1f, 0x56, 0x2c, 0x00, 0xcf, 0x24, 0x5a, 0x41, 0x20, 0x4a, 0x3a, 0x82, 0x27, 0x21, 0x19, 0x02,
	0xcd, 0x7c, 0x1b, 0x84, 0xe3, 0x80, 0x85, 0xd1, 0x54, 0x9d, 0xff, 0x7d, 0x04, 0xa9, 0x9a, 0x18,
	0xf8, 0x8d, 0xd2, 0x94, 0x36, 0x78, 0x0f, 0x0d, 0xdd, 0xc8, 0x16, 0xf0, 0x33, 0x04, 0x70, 0x35,
	0x73, 0xb4, 0x89, 0x1c, 0x43, 0x5d, 0x73, 0xb6, 0x45, 0xfc, 0x1a, 0x41, 0xac, 0xa5, 0x16, 0x37,
	0x81, 0x99, 0xd5, 0x0d, 0x22, 0x9d, 0xc7, 0x5b, 0x5d, 0x87, 0x91, 0x00, 0x1a, 0xca, 0x1f, 0x69,
	0x50, 0x17, 0x53, 0xc9, 0xf4, 0x3d, 0x0a, 0x98, 0xc8, 0xa4, 0x6e, 0x42, 0xda, 0x9f, 0x72, 0x6e,
	0xc7, 0x23, 0x57, 0x50, 0x55, 0xc4, 0x81, 0x3b, 0x89, 0x1c, 0x15, 0xa5, 0xef, 0xd1, 0x22, 0x26,
	0x34, 0x29, 0x79, 0xe8, 0x4e, 0xa2, 0x8e, 0x10, 0xec, 0x78, 0xc4, 0x83, 0x15, 0xe1, 0xca, 0xac,
	0x56, 0x88, 0xd3, 0x5a, 0x40, 0x60, 0xca, 0x5c, 0x30, 0x2d, 0x15, 0xe2, 0xa0, 0xae, 0xa1, 0xaa,
	0xcc, 0x68, 0x71, 0x16, 0x31, 0xb5, 0x42, 0x4a, 0x9a, 0xa4, 0x4b, 0xa8, 0x48, 0x0f, 0x5a, 0xa0,
	0x36, 0x66, 0xdf, 0x84, 0xa2, 0xc9, 0xf9, 0x0d, 0x96, 0xad, 0x2a, 0x4b, 0x97, 0x30, 0x15, 0xc9,
	0x2c, 0xb0, 0xda, 0xf9, 0xa7, 0x71, 0xc8, 0xb2, 0xb7, 0x8c, 0x3f, 0xff, 0x04, 0x22, 0x4a, 0x5f,
	0x08, 0x6b, 0x16, 0x68, 0xa2, 0x7b, 0xfb, 0x39, 0xa6, 0x4e, 0x98, 0xb8, 0x49, 0x6a, 0xee, 0x1b,
	0x58, 0xbd, 0x8d, 0x19, 0x87, 0x3e, 0xfd, 0x01, 0xc1, 0xab, 0xe4, 0x78, 0x67, 0xa1, 0xcf, 0x0f,
	0x2a, 0x0e, 0x3c, 0xdd, 0x7a, 0xb4, 0x8a, 0x39, 0x28, 0x29, 0x96, 0x1e, 0x54, 0x0c, 0xeb, 0x66,
	0xfe, 0x58, 0x65, 0xaf, 0x84, 0x60, 0xd5, 0xf5, 0x44, 0x32, 0x2b, 0xdf, 0x14, 0x1e, 0xd8, 0x09,
	0x65, 0x81, 0xcb, 0x08, 0xf0, 0x9a, 0x99, 0x59, 0x26, 0xfa, 0x23, 0x6c, 0x58, 0x19, 0x66, 0x91,
	0x77, 0x10, 0xe4, 0x86, 0x91, 0x6a, 0x26, 0x78, 0x04, 0xd4, 0x1e, 0x6c, 0xd2, 0x8a, 0x4f, 0x30,
	0x35, 0xd8, 0xcc, 0xbd, 0xb4, 0xea, 0x7f, 0x2a, 0xc0, 0xb6, 0x9d, 0x84, 0x7a, 0xfd, 0x4f, 0x17,
	0x7d, 0x8f, 0xae, 0x20, 0xf8, 0x5b, 0xa6, 0x6f, 0xb3, 0x5e, 0x90, 0xac, 0x74, 0x3c, 0x1e, 0xbb,
	0xe5, 0xe2, 0x2c, 0xf6, 0x1a, 0x26, 0x76, 0xd3, 0xce, 0x69, 0xec, 0x23, 0xa0, 0x1e, 0x1b, 0xb0,
	0x5b, 0x79, 0xab, 0x18, 0x9e, 0x54, 0xcd, 0xf1, 0x2e, 0xa1, 0x22, 0xd2, 0x48, 0x1b, 0x25, 0x85,
	0x97, 0x28, 0xa6, 0xdc, 0x71, 0xc5, 0x6c, 0x92, 0x14, 0x1e, 0xfa, 0x1d, 0x6a, 0x2a, 0x6f, 0x6c,
	0x52, 0x1d, 0x53, 0x79, 0xa4, 0xa6, 0xc5, 0xe2, 0x4d, 0x4f, 0x24, 0x8a, 0x8d, 0xfa, 0x06, 0xd5,
	0xf4, 0xb8, 0xa4, 0x45, 0x72, 0xa0, 0x64, 0x8f, 0xe2, 0x74, 0x1d, 0xf3, 0xce, 0x62, 0x4d, 0xe1,
	0xc4, 0x07, 0x35, 0xa8, 0x68, 0xb1, 0xc8, 0x7e, 0xb4, 0x81, 0x89, 0x45, 0x6a, 0xa6, 0x18, 0xd1,
	0x90, 0x22, 0x58, 0xb7, 0x51, 0x46, 0x47, 0xfa, 0x0e, 0x01, 0xa4, 0x16, 0x30, 0x6b, 0x49, 0x0e,
	0x94, 0x54, 0x7e, 0x65, 0x3b, 0xb8, 0x85, 0xd9, 0x41, 0xa9, 0x96, 0xed, 0xe0, 0x47, 0xd8, 0xb0,
	0x0c, 0x6e, 0x55, 0xcd, 0x06, 0xa6, 0x6a, 0x1a, 0x4e, 0x37, 0xab, 0xe6, 0x9f, 0xb0, 0x99, 0x73,
	0xbc, 0x85, 0x5e, 0x43, 0xa0, 0xd7, 0x2d, 0xeb, 0xe7, 0xdb, 0x94, 0x95, 0x02, 0x16, 0xfb, 0x5b,
	0x54, 0x9b, 0x32, 0x72, 0xc1, 0x44, 0x07, 0x50, 0xcf, 0xbd, 0x9e, 0xa6, 0x25, 0xec, 0x01, 0x66,
	0xac, 0xb1, 0x92, 0x23, 0xad, 0x61, 0x7f, 0x17, 0xe0, 0x49, 0x2e, 0x4b, 0xf4, 0x86, 0x91, 0xad,
	0xfa, 0x1e, 0xdd, 0x44, 0x3c, 0xc2, 0x63, 0xcb, 0xc7, 0x59, 0xcb, 0x48, 0x97, 0x3a, 0x1e, 0xdf,
	0x01, 0xdb, 0xd3, 0xd9, 0x0e, 0x34, 0x31, 0x3b, 0x60, 0x99, 0x5b, 0x7b, 0x4f, 0xaa, 0xab, 0xae,
	0x71, 0x0b, 0xf1, 0x21, 0x86, 0x28, 0x65, 0xf3, 0xc4, 0x77, 0x50, 0x92, 0x69, 0xf5, 0x81, 0x8d,
	0x92, 0x51, 0xff, 0x11, 0x66, 0xbc, 0x13, 0x99, 0xc4, 0xc5, 0xa4, 0x8b, 0x2e, 0x80, 0x24, 0xd9,
	0xa3, 0x11, 0x1e, 0x63, 0x3e, 0x0c, 0xa8, 0x84, 0xc9, 0x18, 0xe7, 0x50, 0x56, 0x49, 0xa2, 0x21,
	0x76, 0x51, 0x9f, 0x9c, 0x44, 0x5e, 0x64, 0x84, 0xb7, 0xb0, 0x90, 0xe4, 0x02, 0x5f, 0xa4, 0x9f,
	0x23, 0xc4, 0x8b, 0xca, 0xfe, 0x5c, 0x48, 0x7b, 0x7b, 0x90, 0xcf, 0x6e, 0x4d, 0x45, 0x5f, 0xe0,
	0xdf, 0x1e, 0x04, 0xc7, 0x18, 0x85, 0xb4, 0x06, 0x91, 0x30, 0x8d, 0xc4, 0xda, 0xbe, 0x83, 0x06,
	0x21, 0xa1, 0x7a, 0x32, 0x5d, 0x41, 0x55, 0x33, 0x5a, 0xe0, 0x46, 0xd7, 0xea, 0xa0, 0x5a, 0xe8,
	0x09, 0x85, 0x2b, 0xbe, 0x71, 0xa3, 0x6b, 0x79, 0x56, 0x37, 0xb0, 0x6a, 0x38, 0x4e, 0x43, 0x3d,
	0xb9, 0x83, 0x11, 0xc5, 0x84, 0xf9, 0x50, 0xd3, 0xad, 0xa7, 0xb1, 0x9e, 0xe1, 0x67, 0x14, 0x13,
	0x75, 0x0e, 0x65, 0xdd, 0x83, 0x82, 0x45, 0x9f, 0xde, 0xc1, 0x90, 0x92, 0x60, 0x48, 0x0c, 0x1b,
	0x86, 0x31, 0x44, 0x34, 0xdc, 0x1d, 0xe2, 0xca, 0xf7, 0xe8, 0x97, 0x77, 0xe4, 0x0c, 0x4e, 0xdb,
	0x9f, 0x8a, 0x9f, 0x1d, 0xaf, 0xf1, 0x33, 0x2c, 0x1a, 0xb7, 0x92, 0x0a, 0xdc, 0x7b, 0xcf, 0x7f,
	0x88, 0x8f, 0xdc, 0xf3, 0x5d, 0x79, 0x41, 0x1e, 0xc1, 0x62, 0xe0, 0x86, 0xee, 0x90, 0x45, 0x2c,
	0x74, 0x46, 0xf1, 0x90, 0xce, 0x34, 0x0b, 0xad, 0x7b, 0xdd, 0x85, 0x74, 0xf1, 0x38, 0x1e, 0x3e,
	0xfd, 0xab, 0x00, 0x24, 0xff, 0x19, 0x9c, 0xac, 0xc1, 0xea, 0xd9, 0xf1, 0xab, 0xe3, 0xd7, 0x6f,
	0x8f, 0x9d, 0xa3, 0x83, 0xde, 0xde, 0x8f, 0x7b, 0xbd, 0x3d, 0xe7, 0xf4, 0xf5, 0x59, 0xf7, 0xe5,
	0x41, 0xe9, 0x7f, 0x84, 0x42, 0xe5, 0xa7, 0xbd, 0x57, 0x07, 0xb9, 0xbf, 0x14, 0x48, 0x1d, 0xaa,
	0x47, 0xbf, 0x9c, 0x9e, 0x1c, 0xe6, 0xfe, 0x34, 0x43, 0x1a, 0x50, 0x3b, 0x3d, 0x39, 0xec, 0xf4,
	0xf2, 0xff, 0x6c, 0xf6, 0x62, 0x4e, 0xfc, 0x8f, 0xc3, 0xb3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x06, 0x89, 0xce, 0x6f, 0x9c, 0x18, 0x00, 0x00,
}
