/*
 * api/service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: version not set
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi_client

// An event represents a relationship between an artifact ID and an execution. There are four kinds of events, relating to both input and output, as well as declared versus undeclared. For example, the DECLARED_INPUT events are part of the signature of an execution. For example, consider: my_execution({\"data\":[3,7],\"schema\":8}) Where 3, 7, and 8 are artifact_ids. Assuming execution_id is 12, this becomes: {artifact_id:3, execution_id: 12, type:DECLARED_INPUT,  path:{step:[{\"key\":\"data\"},{\"index\":0}]}} {artifact_id:7, execution_id: 12, type:DECLARED_INPUT,  path:{step:[{\"key\":\"data\"},{\"index\":1}]}} {artifact_id:8, execution_id: 12, type:DECLARED_INPUT,  path:{step:[{\"key\":\"schema\"}]}} The INPUT is an artifact actually read by the execution. The OUTPUT is an artifact actually written by the execution. The DECLARED_OUTPUT are the artifacts that are the \"official\" output. For example, the trainer may output multiple caches of the parameters (as OUTPUT objects), but then finally write the SavedModel as a DECLARED_OUTPUT. TODO(martinz): add a type for Event, similar to ArtifactType.
type MlMetadataEvent struct {
	// The artifact id is required for an event, and should refer to an existing artifact.
	ArtifactId string `json:"artifact_id,omitempty"`
	// The execution_id is required for an event, and should refer to an existing execution.
	ExecutionId string `json:"execution_id,omitempty"`
	Path EventPath `json:"path,omitempty"`
	Type MlMetadataEventType `json:"type,omitempty"`
	MillisecondsSinceEpoch string `json:"milliseconds_since_epoch,omitempty"`
}
