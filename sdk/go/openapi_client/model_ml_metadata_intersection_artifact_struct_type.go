/*
 * api/service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: version not set
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi_client

// A member of this type must satisfy all constraints. This primarily useful not as an end-user type, but something calculated as an intermediate type in the system.  For example, suppose you have a method: def infer_my_input_type(a): # try to infer the input type of this method.   use_in_method_x(a) # with input type x_input   use_in_method_y(a) # with input type y_input  Given this information, you know that infer_my_input_type has type {\"intersection\":{\"constraints\":[x_input, y_input]}}.  IntersectionArtifactStructType intersection_type = {\"constraints\":[     {\"dict\":{\"properties\":{\"schema\":{\"any\":{}}},              \"extra_properties\":{\"any\":{}}}},     {\"dict\":{\"properties\":{\"data\":{\"any\":{}}},              \"extra_properties\":{\"any\":{}}}}]} Since the first constraint requires the dictionary to have a schema property, and the second constraint requires it to have a data property, this is equivalent to: ArtifactStructType other_type =      {\"dict\":{\"properties\":{\"schema\":{\"any\":{}},\"data\":{\"any\":{}}}},       \"extra_properties\":{\"any\":{}}}
type MlMetadataIntersectionArtifactStructType struct {
	Constraints []MlMetadataArtifactStructType `json:"constraints,omitempty"`
}
