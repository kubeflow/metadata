# coding: utf-8

"""
    api/service.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MlMetadataDictArtifactStructType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'properties': 'dict(str, MlMetadataArtifactStructType)',
        'none_type_not_required': 'bool',
        'extra_properties_type': 'MlMetadataArtifactStructType'
    }

    attribute_map = {
        'properties': 'properties',
        'none_type_not_required': 'none_type_not_required',
        'extra_properties_type': 'extra_properties_type'
    }

    def __init__(self, properties=None, none_type_not_required=None, extra_properties_type=None):  # noqa: E501
        """MlMetadataDictArtifactStructType - a model defined in OpenAPI"""  # noqa: E501

        self._properties = None
        self._none_type_not_required = None
        self._extra_properties_type = None
        self.discriminator = None

        if properties is not None:
            self.properties = properties
        if none_type_not_required is not None:
            self.none_type_not_required = none_type_not_required
        if extra_properties_type is not None:
            self.extra_properties_type = extra_properties_type

    @property
    def properties(self):
        """Gets the properties of this MlMetadataDictArtifactStructType.  # noqa: E501

        Underlying properties for the type.  # noqa: E501

        :return: The properties of this MlMetadataDictArtifactStructType.  # noqa: E501
        :rtype: dict(str, MlMetadataArtifactStructType)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this MlMetadataDictArtifactStructType.

        Underlying properties for the type.  # noqa: E501

        :param properties: The properties of this MlMetadataDictArtifactStructType.  # noqa: E501
        :type: dict(str, MlMetadataArtifactStructType)
        """

        self._properties = properties

    @property
    def none_type_not_required(self):
        """Gets the none_type_not_required of this MlMetadataDictArtifactStructType.  # noqa: E501

        If true, then if properties[\"foo\"] can be None, then that key is not required.  # noqa: E501

        :return: The none_type_not_required of this MlMetadataDictArtifactStructType.  # noqa: E501
        :rtype: bool
        """
        return self._none_type_not_required

    @none_type_not_required.setter
    def none_type_not_required(self, none_type_not_required):
        """Sets the none_type_not_required of this MlMetadataDictArtifactStructType.

        If true, then if properties[\"foo\"] can be None, then that key is not required.  # noqa: E501

        :param none_type_not_required: The none_type_not_required of this MlMetadataDictArtifactStructType.  # noqa: E501
        :type: bool
        """

        self._none_type_not_required = none_type_not_required

    @property
    def extra_properties_type(self):
        """Gets the extra_properties_type of this MlMetadataDictArtifactStructType.  # noqa: E501


        :return: The extra_properties_type of this MlMetadataDictArtifactStructType.  # noqa: E501
        :rtype: MlMetadataArtifactStructType
        """
        return self._extra_properties_type

    @extra_properties_type.setter
    def extra_properties_type(self, extra_properties_type):
        """Sets the extra_properties_type of this MlMetadataDictArtifactStructType.


        :param extra_properties_type: The extra_properties_type of this MlMetadataDictArtifactStructType.  # noqa: E501
        :type: MlMetadataArtifactStructType
        """

        self._extra_properties_type = extra_properties_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MlMetadataDictArtifactStructType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
