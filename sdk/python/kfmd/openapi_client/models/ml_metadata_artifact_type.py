# coding: utf-8

"""
    api/service.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MlMetadataArtifactType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'properties': 'dict(str, MlMetadataPropertyType)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'properties': 'properties'
    }

    def __init__(self, id=None, name=None, properties=None):  # noqa: E501
        """MlMetadataArtifactType - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._properties = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if properties is not None:
            self.properties = properties

    @property
    def id(self):
        """Gets the id of this MlMetadataArtifactType.  # noqa: E501

        The id of the type. 1-1 relationship between type names and IDs.  # noqa: E501

        :return: The id of this MlMetadataArtifactType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MlMetadataArtifactType.

        The id of the type. 1-1 relationship between type names and IDs.  # noqa: E501

        :param id: The id of this MlMetadataArtifactType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MlMetadataArtifactType.  # noqa: E501

        The name of the type.  # noqa: E501

        :return: The name of this MlMetadataArtifactType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MlMetadataArtifactType.

        The name of the type.  # noqa: E501

        :param name: The name of this MlMetadataArtifactType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this MlMetadataArtifactType.  # noqa: E501

        The schema of the type. Properties are always optional in the artifact. Properties of an artifact type can be expanded but not contracted (i.e., you can add columns but not remove them).  # noqa: E501

        :return: The properties of this MlMetadataArtifactType.  # noqa: E501
        :rtype: dict(str, MlMetadataPropertyType)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this MlMetadataArtifactType.

        The schema of the type. Properties are always optional in the artifact. Properties of an artifact type can be expanded but not contracted (i.e., you can add columns but not remove them).  # noqa: E501

        :param properties: The properties of this MlMetadataArtifactType.  # noqa: E501
        :type: dict(str, MlMetadataPropertyType)
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MlMetadataArtifactType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
