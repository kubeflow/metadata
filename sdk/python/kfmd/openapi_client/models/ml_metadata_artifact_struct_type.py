# coding: utf-8

"""
    api/service.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MlMetadataArtifactStructType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'simple': 'MlMetadataArtifactType',
        'union_type': 'MlMetadataUnionArtifactStructType',
        'intersection': 'MlMetadataIntersectionArtifactStructType',
        'list': 'MlMetadataListArtifactStructType',
        '_none': 'object',
        'any': 'object',
        'tuple': 'MlMetadataTupleArtifactStructType',
        'dict': 'MlMetadataDictArtifactStructType'
    }

    attribute_map = {
        'simple': 'simple',
        'union_type': 'union_type',
        'intersection': 'intersection',
        'list': 'list',
        '_none': 'none',
        'any': 'any',
        'tuple': 'tuple',
        'dict': 'dict'
    }

    def __init__(self, simple=None, union_type=None, intersection=None, list=None, _none=None, any=None, tuple=None, dict=None):  # noqa: E501
        """MlMetadataArtifactStructType - a model defined in OpenAPI"""  # noqa: E501

        self._simple = None
        self._union_type = None
        self._intersection = None
        self._list = None
        self.__none = None
        self._any = None
        self._tuple = None
        self._dict = None
        self.discriminator = None

        if simple is not None:
            self.simple = simple
        if union_type is not None:
            self.union_type = union_type
        if intersection is not None:
            self.intersection = intersection
        if list is not None:
            self.list = list
        if _none is not None:
            self._none = _none
        if any is not None:
            self.any = any
        if tuple is not None:
            self.tuple = tuple
        if dict is not None:
            self.dict = dict

    @property
    def simple(self):
        """Gets the simple of this MlMetadataArtifactStructType.  # noqa: E501


        :return: The simple of this MlMetadataArtifactStructType.  # noqa: E501
        :rtype: MlMetadataArtifactType
        """
        return self._simple

    @simple.setter
    def simple(self, simple):
        """Sets the simple of this MlMetadataArtifactStructType.


        :param simple: The simple of this MlMetadataArtifactStructType.  # noqa: E501
        :type: MlMetadataArtifactType
        """

        self._simple = simple

    @property
    def union_type(self):
        """Gets the union_type of this MlMetadataArtifactStructType.  # noqa: E501


        :return: The union_type of this MlMetadataArtifactStructType.  # noqa: E501
        :rtype: MlMetadataUnionArtifactStructType
        """
        return self._union_type

    @union_type.setter
    def union_type(self, union_type):
        """Sets the union_type of this MlMetadataArtifactStructType.


        :param union_type: The union_type of this MlMetadataArtifactStructType.  # noqa: E501
        :type: MlMetadataUnionArtifactStructType
        """

        self._union_type = union_type

    @property
    def intersection(self):
        """Gets the intersection of this MlMetadataArtifactStructType.  # noqa: E501


        :return: The intersection of this MlMetadataArtifactStructType.  # noqa: E501
        :rtype: MlMetadataIntersectionArtifactStructType
        """
        return self._intersection

    @intersection.setter
    def intersection(self, intersection):
        """Sets the intersection of this MlMetadataArtifactStructType.


        :param intersection: The intersection of this MlMetadataArtifactStructType.  # noqa: E501
        :type: MlMetadataIntersectionArtifactStructType
        """

        self._intersection = intersection

    @property
    def list(self):
        """Gets the list of this MlMetadataArtifactStructType.  # noqa: E501


        :return: The list of this MlMetadataArtifactStructType.  # noqa: E501
        :rtype: MlMetadataListArtifactStructType
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this MlMetadataArtifactStructType.


        :param list: The list of this MlMetadataArtifactStructType.  # noqa: E501
        :type: MlMetadataListArtifactStructType
        """

        self._list = list

    @property
    def _none(self):
        """Gets the _none of this MlMetadataArtifactStructType.  # noqa: E501


        :return: The _none of this MlMetadataArtifactStructType.  # noqa: E501
        :rtype: object
        """
        return self.__none

    @_none.setter
    def _none(self, _none):
        """Sets the _none of this MlMetadataArtifactStructType.


        :param _none: The _none of this MlMetadataArtifactStructType.  # noqa: E501
        :type: object
        """

        self.__none = _none

    @property
    def any(self):
        """Gets the any of this MlMetadataArtifactStructType.  # noqa: E501

        Every ArtifactStruct is a member of this type.  # noqa: E501

        :return: The any of this MlMetadataArtifactStructType.  # noqa: E501
        :rtype: object
        """
        return self._any

    @any.setter
    def any(self, any):
        """Sets the any of this MlMetadataArtifactStructType.

        Every ArtifactStruct is a member of this type.  # noqa: E501

        :param any: The any of this MlMetadataArtifactStructType.  # noqa: E501
        :type: object
        """

        self._any = any

    @property
    def tuple(self):
        """Gets the tuple of this MlMetadataArtifactStructType.  # noqa: E501


        :return: The tuple of this MlMetadataArtifactStructType.  # noqa: E501
        :rtype: MlMetadataTupleArtifactStructType
        """
        return self._tuple

    @tuple.setter
    def tuple(self, tuple):
        """Sets the tuple of this MlMetadataArtifactStructType.


        :param tuple: The tuple of this MlMetadataArtifactStructType.  # noqa: E501
        :type: MlMetadataTupleArtifactStructType
        """

        self._tuple = tuple

    @property
    def dict(self):
        """Gets the dict of this MlMetadataArtifactStructType.  # noqa: E501


        :return: The dict of this MlMetadataArtifactStructType.  # noqa: E501
        :rtype: MlMetadataDictArtifactStructType
        """
        return self._dict

    @dict.setter
    def dict(self, dict):
        """Sets the dict of this MlMetadataArtifactStructType.


        :param dict: The dict of this MlMetadataArtifactStructType.  # noqa: E501
        :type: MlMetadataDictArtifactStructType
        """

        self._dict = dict

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MlMetadataArtifactStructType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
