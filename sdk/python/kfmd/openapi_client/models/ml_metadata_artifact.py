# coding: utf-8

"""
    api/service.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class MlMetadataArtifact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'type_id': 'str',
        'uri': 'str',
        'properties': 'dict(str, MlMetadataValue)',
        'custom_properties': 'dict(str, MlMetadataValue)'
    }

    attribute_map = {
        'id': 'id',
        'type_id': 'type_id',
        'uri': 'uri',
        'properties': 'properties',
        'custom_properties': 'custom_properties'
    }

    def __init__(self, id=None, type_id=None, uri=None, properties=None, custom_properties=None):  # noqa: E501
        """MlMetadataArtifact - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._type_id = None
        self._uri = None
        self._properties = None
        self._custom_properties = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type_id is not None:
            self.type_id = type_id
        if uri is not None:
            self.uri = uri
        if properties is not None:
            self.properties = properties
        if custom_properties is not None:
            self.custom_properties = custom_properties

    @property
    def id(self):
        """Gets the id of this MlMetadataArtifact.  # noqa: E501

        The id of the artifact.  # noqa: E501

        :return: The id of this MlMetadataArtifact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MlMetadataArtifact.

        The id of the artifact.  # noqa: E501

        :param id: The id of this MlMetadataArtifact.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type_id(self):
        """Gets the type_id of this MlMetadataArtifact.  # noqa: E501

        The id of an ArtifactType. Type must be specified when an artifact is created, and it cannot be changed.  # noqa: E501

        :return: The type_id of this MlMetadataArtifact.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this MlMetadataArtifact.

        The id of an ArtifactType. Type must be specified when an artifact is created, and it cannot be changed.  # noqa: E501

        :param type_id: The type_id of this MlMetadataArtifact.  # noqa: E501
        :type: str
        """

        self._type_id = type_id

    @property
    def uri(self):
        """Gets the uri of this MlMetadataArtifact.  # noqa: E501

        The uniform resource identifier of the physical artifact. May be empty if there is no physical artifact.  # noqa: E501

        :return: The uri of this MlMetadataArtifact.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this MlMetadataArtifact.

        The uniform resource identifier of the physical artifact. May be empty if there is no physical artifact.  # noqa: E501

        :param uri: The uri of this MlMetadataArtifact.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def properties(self):
        """Gets the properties of this MlMetadataArtifact.  # noqa: E501

        Properties of the artifact. Properties must be specified in the ArtifactType.  # noqa: E501

        :return: The properties of this MlMetadataArtifact.  # noqa: E501
        :rtype: dict(str, MlMetadataValue)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this MlMetadataArtifact.

        Properties of the artifact. Properties must be specified in the ArtifactType.  # noqa: E501

        :param properties: The properties of this MlMetadataArtifact.  # noqa: E501
        :type: dict(str, MlMetadataValue)
        """

        self._properties = properties

    @property
    def custom_properties(self):
        """Gets the custom_properties of this MlMetadataArtifact.  # noqa: E501

        User provided custom properties which are not defined by its type.  # noqa: E501

        :return: The custom_properties of this MlMetadataArtifact.  # noqa: E501
        :rtype: dict(str, MlMetadataValue)
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this MlMetadataArtifact.

        User provided custom properties which are not defined by its type.  # noqa: E501

        :param custom_properties: The custom_properties of this MlMetadataArtifact.  # noqa: E501
        :type: dict(str, MlMetadataValue)
        """

        self._custom_properties = custom_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MlMetadataArtifact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
