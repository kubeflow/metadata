# coding: utf-8

"""
    api/service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.api_namespace import ApiNamespace  # noqa: F401,E501
from swagger_client.models.api_type import ApiType  # noqa: F401,E501


class ApiArtifactType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'namespace': 'ApiNamespace',
        'type_properties': 'dict(str, ApiType)',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'namespace': 'namespace',
        'type_properties': 'type_properties',
        'description': 'description'
    }

    def __init__(self, id=None, name=None, namespace=None, type_properties=None, description=None):  # noqa: E501
        """ApiArtifactType - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._namespace = None
        self._type_properties = None
        self._description = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if type_properties is not None:
            self.type_properties = type_properties
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this ApiArtifactType.  # noqa: E501

        System-provided id.  # noqa: E501

        :return: The id of this ApiArtifactType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiArtifactType.

        System-provided id.  # noqa: E501

        :param id: The id of this ApiArtifactType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApiArtifactType.  # noqa: E501

        Required. Represents the name of a type. Must be unique within a namespace.  # noqa: E501

        :return: The name of this ApiArtifactType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiArtifactType.

        Required. Represents the name of a type. Must be unique within a namespace.  # noqa: E501

        :param name: The name of this ApiArtifactType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this ApiArtifactType.  # noqa: E501

        Represents the namespace under which to store this type. Empty defaults to the default, system-defined namespace.  # noqa: E501

        :return: The namespace of this ApiArtifactType.  # noqa: E501
        :rtype: ApiNamespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ApiArtifactType.

        Represents the namespace under which to store this type. Empty defaults to the default, system-defined namespace.  # noqa: E501

        :param namespace: The namespace of this ApiArtifactType.  # noqa: E501
        :type: ApiNamespace
        """

        self._namespace = namespace

    @property
    def type_properties(self):
        """Gets the type_properties of this ApiArtifactType.  # noqa: E501

        Schema representing the fields and their types for this artifact.  # noqa: E501

        :return: The type_properties of this ApiArtifactType.  # noqa: E501
        :rtype: dict(str, ApiType)
        """
        return self._type_properties

    @type_properties.setter
    def type_properties(self, type_properties):
        """Sets the type_properties of this ApiArtifactType.

        Schema representing the fields and their types for this artifact.  # noqa: E501

        :param type_properties: The type_properties of this ApiArtifactType.  # noqa: E501
        :type: dict(str, ApiType)
        """

        self._type_properties = type_properties

    @property
    def description(self):
        """Gets the description of this ApiArtifactType.  # noqa: E501

        An optional human-readable description of this type.  # noqa: E501

        :return: The description of this ApiArtifactType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiArtifactType.

        An optional human-readable description of this type.  # noqa: E501

        :param description: The description of this ApiArtifactType.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiArtifactType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiArtifactType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
