# coding: utf-8

"""
    api/service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.api_double_type import ApiDoubleType  # noqa: F401,E501
from swagger_client.models.api_int_type import ApiIntType  # noqa: F401,E501
from swagger_client.models.api_string_type import ApiStringType  # noqa: F401,E501


class ApiType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'string_type': 'ApiStringType',
        'int_type': 'ApiIntType',
        'double_type': 'ApiDoubleType'
    }

    attribute_map = {
        'string_type': 'string_type',
        'int_type': 'int_type',
        'double_type': 'double_type'
    }

    def __init__(self, string_type=None, int_type=None, double_type=None):  # noqa: E501
        """ApiType - a model defined in Swagger"""  # noqa: E501

        self._string_type = None
        self._int_type = None
        self._double_type = None
        self.discriminator = None

        if string_type is not None:
            self.string_type = string_type
        if int_type is not None:
            self.int_type = int_type
        if double_type is not None:
            self.double_type = double_type

    @property
    def string_type(self):
        """Gets the string_type of this ApiType.  # noqa: E501


        :return: The string_type of this ApiType.  # noqa: E501
        :rtype: ApiStringType
        """
        return self._string_type

    @string_type.setter
    def string_type(self, string_type):
        """Sets the string_type of this ApiType.


        :param string_type: The string_type of this ApiType.  # noqa: E501
        :type: ApiStringType
        """

        self._string_type = string_type

    @property
    def int_type(self):
        """Gets the int_type of this ApiType.  # noqa: E501


        :return: The int_type of this ApiType.  # noqa: E501
        :rtype: ApiIntType
        """
        return self._int_type

    @int_type.setter
    def int_type(self, int_type):
        """Sets the int_type of this ApiType.


        :param int_type: The int_type of this ApiType.  # noqa: E501
        :type: ApiIntType
        """

        self._int_type = int_type

    @property
    def double_type(self):
        """Gets the double_type of this ApiType.  # noqa: E501


        :return: The double_type of this ApiType.  # noqa: E501
        :rtype: ApiDoubleType
        """
        return self._double_type

    @double_type.setter
    def double_type(self, double_type):
        """Sets the double_type of this ApiType.


        :param double_type: The double_type of this ApiType.  # noqa: E501
        :type: ApiDoubleType
        """

        self._double_type = double_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
