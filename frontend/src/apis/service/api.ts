/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * api/service.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * ArtifactType represents the type of an ML artifact. It is used to define the schema of a named type.
 * @export
 * @interface ApiArtifactType
 */
export interface ApiArtifactType {
    /**
     * System-provided id.
     * @type {string}
     * @memberof ApiArtifactType
     */
    id?: string;
    /**
     * Required. Represents the name of a type. Must be unique within a namespace.
     * @type {string}
     * @memberof ApiArtifactType
     */
    name?: string;
    /**
     * Represents the namespace under which to store this type. Empty defaults to the default, system-defined namespace.
     * @type {ApiNamespace}
     * @memberof ApiArtifactType
     */
    namespace?: ApiNamespace;
    /**
     * Schema representing the fields and their types for this artifact.
     * @type {{ [key: string]: ApiType; }}
     * @memberof ApiArtifactType
     */
    type_properties?: { [key: string]: ApiType; };
    /**
     * An optional human-readable description of this type.
     * @type {string}
     * @memberof ApiArtifactType
     */
    description?: string;
}

/**
 * 
 * @export
 * @interface ApiCreateArtifactTypeResponse
 */
export interface ApiCreateArtifactTypeResponse {
    /**
     * Newly created artifact type with id.
     * @type {ApiArtifactType}
     * @memberof ApiCreateArtifactTypeResponse
     */
    artifact_type?: ApiArtifactType;
}

/**
 * Represents double types.
 * @export
 * @interface ApiDoubleType
 */
export interface ApiDoubleType {
    /**
     * An optional OpenAPI-compatible field-validation schema for this field.
     * @type {string}
     * @memberof ApiDoubleType
     */
    validator?: string;
}

/**
 * 
 * @export
 * @interface ApiGetArtifactTypeResponse
 */
export interface ApiGetArtifactTypeResponse {
    /**
     * 
     * @type {ApiArtifactType}
     * @memberof ApiGetArtifactTypeResponse
     */
    artifact_type?: ApiArtifactType;
}

/**
 * Represents integer types.
 * @export
 * @interface ApiIntType
 */
export interface ApiIntType {
    /**
     * An optional OpenAPI-compatible field-validation schema for this field.
     * @type {string}
     * @memberof ApiIntType
     */
    validator?: string;
}

/**
 * 
 * @export
 * @interface ApiListArtifactTypesResponse
 */
export interface ApiListArtifactTypesResponse {
    /**
     * 
     * @type {Array&lt;ApiArtifactType&gt;}
     * @memberof ApiListArtifactTypesResponse
     */
    artifact_types?: Array<ApiArtifactType>;
}

/**
 * Namespaces represent a named collection of ArtifactTypes and ExecutionTypes. This ensures multiple organizations can define ML schemas without type name collision.
 * @export
 * @interface ApiNamespace
 */
export interface ApiNamespace {
    /**
     * E.g. 'kubeflow.org/pipelines/v1' or 'myorganization.com/ml/v1'.
     * @type {string}
     * @memberof ApiNamespace
     */
    name?: string;
}

/**
 * Represents string types.
 * @export
 * @interface ApiStringType
 */
export interface ApiStringType {
    /**
     * An optional OpenAPI-compatible field-validation schema for this field.
     * @type {string}
     * @memberof ApiStringType
     */
    validator?: string;
}

/**
 * Type is the type of a field.
 * @export
 * @interface ApiType
 */
export interface ApiType {
    /**
     * 
     * @type {ApiStringType}
     * @memberof ApiType
     */
    string_type?: ApiStringType;
    /**
     * 
     * @type {ApiIntType}
     * @memberof ApiType
     */
    int_type?: ApiIntType;
    /**
     * 
     * @type {ApiDoubleType}
     * @memberof ApiType
     */
    double_type?: ApiDoubleType;
}


/**
 * MetadataServiceApi - fetch parameter creator
 * @export
 */
export const MetadataServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ApiArtifactType} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArtifactType(body: ApiArtifactType, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createArtifactType.');
            }
            const localVarPath = `/api/v1alpha1/artifact_types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ApiArtifactType" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifactType(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteArtifactType.');
            }
            const localVarPath = `/api/v1alpha1/artifact_types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtifactType(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getArtifactType.');
            }
            const localVarPath = `/api/v1alpha1/artifact_type/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArtifactTypes(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1alpha1/artifact_types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetadataServiceApi - functional programming interface
 * @export
 */
export const MetadataServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ApiArtifactType} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArtifactType(body: ApiArtifactType, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiCreateArtifactTypeResponse> {
            const localVarFetchArgs = MetadataServiceApiFetchParamCreator(configuration).createArtifactType(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifactType(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = MetadataServiceApiFetchParamCreator(configuration).deleteArtifactType(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtifactType(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiGetArtifactTypeResponse> {
            const localVarFetchArgs = MetadataServiceApiFetchParamCreator(configuration).getArtifactType(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArtifactTypes(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiListArtifactTypesResponse> {
            const localVarFetchArgs = MetadataServiceApiFetchParamCreator(configuration).listArtifactTypes(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MetadataServiceApi - factory interface
 * @export
 */
export const MetadataServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {ApiArtifactType} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArtifactType(body: ApiArtifactType, options?: any) {
            return MetadataServiceApiFp(configuration).createArtifactType(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifactType(id: string, options?: any) {
            return MetadataServiceApiFp(configuration).deleteArtifactType(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtifactType(id: string, options?: any) {
            return MetadataServiceApiFp(configuration).getArtifactType(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArtifactTypes(options?: any) {
            return MetadataServiceApiFp(configuration).listArtifactTypes(options)(fetch, basePath);
        },
    };
};

/**
 * MetadataServiceApi - object-oriented interface
 * @export
 * @class MetadataServiceApi
 * @extends {BaseAPI}
 */
export class MetadataServiceApi extends BaseAPI {
    /**
     * 
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataServiceApi
     */
    public createArtifactType(body: ApiArtifactType, options?: any) {
        return MetadataServiceApiFp(this.configuration).createArtifactType(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataServiceApi
     */
    public deleteArtifactType(id: string, options?: any) {
        return MetadataServiceApiFp(this.configuration).deleteArtifactType(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataServiceApi
     */
    public getArtifactType(id: string, options?: any) {
        return MetadataServiceApiFp(this.configuration).getArtifactType(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataServiceApi
     */
    public listArtifactTypes(options?: any) {
        return MetadataServiceApiFp(this.configuration).listArtifactTypes(options)(this.fetch, this.basePath);
    }

}

