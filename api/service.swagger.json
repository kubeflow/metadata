{
  "swagger": "2.0",
  "info": {
    "title": "api/service.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1alpha1/artifact_types": {
      "get": {
        "operationId": "ListArtifactTypes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListArtifactTypesResponse"
            }
          }
        },
        "tags": [
          "MetadataService"
        ]
      },
      "post": {
        "operationId": "CreateArtifactType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateArtifactTypeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ml_metadataArtifactType"
            }
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/api/v1alpha1/artifacts": {
      "get": {
        "operationId": "ListArtifacts2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListArtifactsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/api/v1alpha1/execution_types": {
      "get": {
        "operationId": "ListExecutionTypes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListExecutionTypesResponse"
            }
          }
        },
        "tags": [
          "MetadataService"
        ]
      },
      "post": {
        "operationId": "CreateExecutionType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateExecutionTypeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ml_metadataExecutionType"
            }
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/api/v1alpha1/executions": {
      "get": {
        "operationId": "ListExecutions2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListExecutionsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/api/v1alpha1/{artifactName}": {
      "get": {
        "operationId": "GetArtifact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetArtifactResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "artifactName",
            "description": "Artifact name is like\n`artifact_types/{namespace}/{typename}/artifact/{id}`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetadataService"
        ]
      },
      "delete": {
        "operationId": "DeleteArtifact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "artifactName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/api/v1alpha1/{artifactTypeName}": {
      "get": {
        "operationId": "GetArtifactType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetArtifactTypeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "artifactTypeName",
            "description": "ArtifactType names are of the form `artifact_types/{namespace}/{name}`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetadataService"
        ]
      },
      "delete": {
        "operationId": "DeleteArtifactType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "artifactTypeName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/api/v1alpha1/{name}/artifacts": {
      "get": {
        "operationId": "ListArtifacts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListArtifactsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/api/v1alpha1/{executionName}": {
      "get": {
        "operationId": "GetExecution",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetExecutionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "executionName",
            "description": "Execution name is like\n`execution_types/{namespace}/{typename}/execution/{id}`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetadataService"
        ]
      },
      "delete": {
        "operationId": "DeleteExecution",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "executionName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/api/v1alpha1/{executionType}": {
      "get": {
        "operationId": "GetExecutionType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetExecutionTypeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "executionType",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetadataService"
        ]
      },
      "delete": {
        "operationId": "DeleteExecutionType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "executionType",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/api/v1alpha1/{name}/executions": {
      "get": {
        "operationId": "ListExecutions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListExecutionsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/api/v1alpha1/{parent}/artifacts": {
      "post": {
        "summary": "NOTE:\nThe order of the following RPC methods affects the order of matching\na particular HTTP path. So put a more specific path pattern before\na generic one. For example,\nGET /api/v1alpha1/{parent}/artifacts\nshould appear before\nGET /api/v1alpha1/{name} to be possibly matched.",
        "operationId": "CreateArtifact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateArtifactResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Creates the specified artifact as an instance of ArtifactType with this\nfully qualified name. |parent| takes the form\n`artifact_types/{namespace}/{name\u003e}`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The Artifact to create. Note that Artifact.type_id is ignored.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ml_metadataArtifact"
            }
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/api/v1alpha1/{parent}/executions": {
      "post": {
        "operationId": "CreateExecution",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateExecutionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Creates the specified artifact as an instance of ExecutionType with this\nfully qualified name. |parent| takes the form\n`execution_types/{namespace}/{name\u003e}`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The Execution to create. Note that Execution.type_id is ignored.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ml_metadataExecution"
            }
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    }
  },
  "definitions": {
    "apiCreateArtifactResponse": {
      "type": "object",
      "properties": {
        "artifact": {
          "$ref": "#/definitions/ml_metadataArtifact",
          "description": "Newly created artifact with id."
        }
      }
    },
    "apiCreateArtifactTypeResponse": {
      "type": "object",
      "properties": {
        "artifact_type": {
          "$ref": "#/definitions/ml_metadataArtifactType",
          "description": "Newly created artifact type with id."
        }
      }
    },
    "apiCreateExecutionResponse": {
      "type": "object",
      "properties": {
        "execution": {
          "$ref": "#/definitions/ml_metadataExecution",
          "description": "Newly created execution with id."
        }
      }
    },
    "apiCreateExecutionTypeResponse": {
      "type": "object",
      "properties": {
        "execution_type": {
          "$ref": "#/definitions/ml_metadataExecutionType",
          "description": "Newly created execution type with id."
        }
      }
    },
    "apiGetArtifactResponse": {
      "type": "object",
      "properties": {
        "artifact": {
          "$ref": "#/definitions/ml_metadataArtifact"
        }
      }
    },
    "apiGetArtifactTypeResponse": {
      "type": "object",
      "properties": {
        "artifact_type": {
          "$ref": "#/definitions/ml_metadataArtifactType"
        }
      }
    },
    "apiGetExecutionResponse": {
      "type": "object",
      "properties": {
        "execution": {
          "$ref": "#/definitions/ml_metadataExecution"
        }
      }
    },
    "apiGetExecutionTypeResponse": {
      "type": "object",
      "properties": {
        "execution_type": {
          "$ref": "#/definitions/ml_metadataExecutionType"
        }
      }
    },
    "apiListArtifactTypesResponse": {
      "type": "object",
      "properties": {
        "artifact_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ml_metadataArtifactType"
          },
          "collectionFormat": "multi"
        }
      }
    },
    "apiListArtifactsResponse": {
      "type": "object",
      "properties": {
        "artifacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ml_metadataArtifact"
          },
          "collectionFormat": "multi"
        }
      }
    },
    "apiListExecutionTypesResponse": {
      "type": "object",
      "properties": {
        "execution_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ml_metadataExecutionType"
          },
          "collectionFormat": "multi"
        }
      }
    },
    "apiListExecutionsResponse": {
      "type": "object",
      "properties": {
        "executions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ml_metadataExecution"
          },
          "collectionFormat": "multi"
        }
      }
    },
    "ml_metadataAnyArtifactStructType": {
      "type": "object",
      "description": "Every ArtifactStruct is a member of this type."
    },
    "ml_metadataArtifact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "The id of the artifact."
        },
        "type_id": {
          "type": "string",
          "format": "int64",
          "description": "The id of an ArtifactType.\nType must be specified when an artifact is created, and it cannot be\nchanged."
        },
        "uri": {
          "type": "string",
          "description": "The uniform resource identifier of the physical artifact.\nMay be empty if there is no physical artifact."
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ml_metadataValue"
          },
          "description": "Properties of the artifact.\nProperties must be specified in the ArtifactType."
        },
        "custom_properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ml_metadataValue"
          },
          "description": "User provided custom properties which are not defined by its type."
        }
      }
    },
    "ml_metadataArtifactStructType": {
      "type": "object",
      "properties": {
        "simple": {
          "$ref": "#/definitions/ml_metadataArtifactType"
        },
        "union_type": {
          "$ref": "#/definitions/ml_metadataUnionArtifactStructType"
        },
        "intersection": {
          "$ref": "#/definitions/ml_metadataIntersectionArtifactStructType"
        },
        "list": {
          "$ref": "#/definitions/ml_metadataListArtifactStructType"
        },
        "none": {
          "$ref": "#/definitions/ml_metadataNoneArtifactStructType"
        },
        "any": {
          "$ref": "#/definitions/ml_metadataAnyArtifactStructType"
        },
        "tuple": {
          "$ref": "#/definitions/ml_metadataTupleArtifactStructType"
        },
        "dict": {
          "$ref": "#/definitions/ml_metadataDictArtifactStructType"
        }
      },
      "description": "The type of an ArtifactStruct.\nAn artifact struct type represents an infinite set of artifact structs.\nIt can specify the input or output type of an ExecutionType.\nSee the more specific types referenced in the message for more details."
    },
    "ml_metadataArtifactType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "The id of the type. 1-1 relationship between type names and IDs."
        },
        "name": {
          "type": "string",
          "description": "The name of the type."
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ml_metadataPropertyType"
          },
          "description": "The schema of the type.\nProperties are always optional in the artifact.\nProperties of an artifact type can be expanded but not contracted (i.e.,\nyou can add columns but not remove them)."
        }
      }
    },
    "ml_metadataDictArtifactStructType": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ml_metadataArtifactStructType"
          },
          "description": "Underlying properties for the type."
        },
        "none_type_not_required": {
          "type": "boolean",
          "format": "boolean",
          "description": "If true, then if properties[\"foo\"] can be None, then that key is not\nrequired."
        },
        "extra_properties_type": {
          "$ref": "#/definitions/ml_metadataArtifactStructType",
          "description": "Extra keys are allowed that are not specified in properties. These\nkeys must have the type specified below.\nIf this is not specified, then extra properties are not allowed."
        }
      },
      "title": "A artifact struct type that represents a record or struct-like dictionary.\nArtifactStruct would be map (i.e. ArtifactStructMap)"
    },
    "ml_metadataExecution": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "The id of the execution."
        },
        "type_id": {
          "type": "string",
          "format": "int64",
          "description": "The id of an ExecutionType.\nThe ExecutionType must be specified and cannot be changed."
        },
        "last_known_state": {
          "$ref": "#/definitions/ml_metadataExecutionState",
          "description": "The last known state of an execution."
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ml_metadataValue"
          },
          "description": "Properties of the Execution.\nProperties must be specified in the ExecutionType."
        },
        "custom_properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ml_metadataValue"
          },
          "description": "User provided custom properties which are not defined by its type."
        }
      }
    },
    "ml_metadataExecutionState": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "NEW",
        "RUNNING",
        "COMPLETE",
        "FAILED"
      ],
      "default": "UNKNOWN",
      "description": "TODO(martinz): consider adding INVALIDATED as a state."
    },
    "ml_metadataExecutionType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "The id of the type. 1-1 relationship between type names and IDs."
        },
        "name": {
          "type": "string",
          "description": "The name of the type."
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ml_metadataPropertyType"
          },
          "description": "The schema of the type.\nProperties are always optional in the execution."
        },
        "input_type": {
          "$ref": "#/definitions/ml_metadataArtifactStructType",
          "description": "The ArtifactStructType of the input.\nFor example: {\n    \"dict\":{\n       \"properties\":{\n         \"schema\":{\n           \"union_type\":{\n             \"none\":{},\n             \"simple\":{...schema type...}\n            },\n         },\n         \"data\":{\n           \"simple\":{...data_type...}\n         }\n      }\n    }\n}\nThat would be an optional schema field with a required data field."
        },
        "output_type": {
          "$ref": "#/definitions/ml_metadataArtifactStructType",
          "title": "The ArtifactStructType of the output.\nFor example {\"simple\":{...stats gen output type...}}"
        }
      }
    },
    "ml_metadataIntersectionArtifactStructType": {
      "type": "object",
      "properties": {
        "constraints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ml_metadataArtifactStructType"
          },
          "collectionFormat": "multi"
        }
      },
      "description": "A member of this type must satisfy all constraints.\nThis primarily useful not as an end-user type, but something calculated\nas an intermediate type in the system.\n\nFor example, suppose you have a method:\ndef infer_my_input_type(a): # try to infer the input type of this method.\n  use_in_method_x(a) # with input type x_input\n  use_in_method_y(a) # with input type y_input\n\nGiven this information, you know that infer_my_input_type has\ntype {\"intersection\":{\"constraints\":[x_input, y_input]}}.\n\nIntersectionArtifactStructType intersection_type = {\"constraints\":[\n    {\"dict\":{\"properties\":{\"schema\":{\"any\":{}}},\n             \"extra_properties\":{\"any\":{}}}},\n    {\"dict\":{\"properties\":{\"data\":{\"any\":{}}},\n             \"extra_properties\":{\"any\":{}}}}]}\nSince the first constraint requires the dictionary to have a schema\nproperty, and the second constraint requires it to have a data property, this\nis equivalent to:\nArtifactStructType other_type =\n     {\"dict\":{\"properties\":{\"schema\":{\"any\":{}},\"data\":{\"any\":{}}}},\n      \"extra_properties\":{\"any\":{}}}"
    },
    "ml_metadataListArtifactStructType": {
      "type": "object",
      "properties": {
        "element": {
          "$ref": "#/definitions/ml_metadataArtifactStructType",
          "description": "Every entry in the list must be of this type.\nNote: if this type is Any, then the list can have arbitrary elements."
        }
      },
      "description": "Represents an ArtifactStruct list type with homogeneous elements."
    },
    "ml_metadataNoneArtifactStructType": {
      "type": "object",
      "title": "The only member of this type is a None artifact.\nNote: ArtifactStruct{} is a None artifact.\nThis can represent an execution that has no outputs (or inputs),\nor can be part of a UnionArtifactStructType to represent an optional\ninput.\nFor example, StatsGen has an \"optional\" schema input.\nA practical example of this is:\nstats_gen_type = {\n    \"dict\":{\n       \"properties\":{\n         \"schema\":{\n           \"union_type\":{\n             \"none\":{},\n             \"simple\":{...schema type...}\n            },\n         },\n         \"data\":{\n           \"simple\":{...data_type...}\n         }\n      }\n    }\n};"
    },
    "ml_metadataPropertyType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "INT",
        "DOUBLE",
        "STRING"
      ],
      "default": "UNKNOWN",
      "description": "TODO(martinz): consider moving this inside some message, to avoid having\nliterals directly in apo package."
    },
    "ml_metadataTupleArtifactStructType": {
      "type": "object",
      "properties": {
        "elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ml_metadataArtifactStructType"
          },
          "collectionFormat": "multi"
        }
      },
      "description": "An ordered list of heterogenous artifact structs.\nThe length of the list is fixed.\nEach position in the list can have a different type."
    },
    "ml_metadataUnionArtifactStructType": {
      "type": "object",
      "properties": {
        "candidates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ml_metadataArtifactStructType"
          },
          "description": "An artifact struct matches this type if it matches any of the candidates.\nIf candidates is empty, this is a bottom type (matches no artifacts).",
          "collectionFormat": "multi"
        }
      },
      "description": "Represents a union of types."
    },
    "ml_metadataValue": {
      "type": "object",
      "properties": {
        "int_value": {
          "type": "string",
          "format": "int64"
        },
        "double_value": {
          "type": "number",
          "format": "double"
        },
        "string_value": {
          "type": "string"
        }
      },
      "description": "A value in properties."
    }
  }
}
