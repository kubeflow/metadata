// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Placeholder for Core API definitions.

syntax = "proto3";

option go_package = "github.com/kubeflow/metadata/api";
package api;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

// Data model protos.

// Workspaces represent a named collection of Artifacts and Executions. Similar
// concept as that of a folder to group files.
message Workspace {
  string name = 1;
}

// Namespaces represent a named collection of ArtifactTypes and ExecutionTypes.
// This ensures multiple organizations can define ML schemas without type name
// collision.
message Namespace {
  // E.g. 'kubeflow.org/pipelines/v1' or 'myorganization.com/ml/v1'.
  string name = 1;
}

// ArtifactType represents the type of an ML artifact. It is used to define the
// schema of a named type.
message ArtifactType {
  // System-provided id.
  int64 id = 1;
  // Required. Represents the name of a type. Must be unique within a
  // namespace.
  string name = 2;
  // Schema representing the fields and their types for this artifact.
  map<string, PropertyType> properties = 3;
  // Represents the namespace under which to store this type. Empty defaults
  // to the default, system-defined namespace.
  Namespace namespace = 4;
  // An optional human-readable description of this type.
  string description = 5;
}

// ExecutionType represents the type of an ML execution step.
message ExecutionType {
  // System-provided id.
  int64 id = 1;
  // Required. Represents the name of the type. Must be unique within a
  // namespace.
  string name = 2;
  // Represents the namespace under which to store this type. Empty defaults
  // to the 'default' namespace.
  Namespace namespace = 3;
  // Schema representing the fields and their types for this type.
  map<string, PropertyType> type_properties = 4;
  // An optional human-readable description of this type.
  string description = 5;
}

// Artifact represents metadata about a machine-learning workflow artifact.
message Artifact {
  // System-provided id.
  int64 id = 1;
  // The id of the type of the artifact.
  int64 type_id = 2;
  // The URI of the artifact.
  string uri = 3;
  // Properties must be specified in the ArtifactType.
  map<string, Value> properties = 4;
  // Arbitrary user-provided properties that do not correspond to fields in the
  // schema for the artifact type. These additional properties can be specified
  // by the user when the artifact is created/updated.
  map<string, Value> custom_properties = 5;
  // Optional. Human-readable name of the artifact.
  string name = 6;
  // Required. The workspace that an artifact belongs to. Empty defaults to the
  // 'default' workspace.
  Workspace workspace = 7;
  // Arbitrary key-value pairs for labeling.
  map<string, string> labels = 8;
  // The time at which the artifact was created. System-provided.
  google.protobuf.Timestamp create_time = 9;
  // The time at which the artifact was last updated. System-provided.
  google.protobuf.Timestamp update_time = 10;
}

// Execution represents metadata about a machine-learning workflow execution
// step.
message Execution {
  // System-provided id.
  int64 id = 1;
  // Optional. Human-readable name of the artifact.
  string name = 2;
  // Required. The workspace that the execution belongs to. Empty defaults to
  // the 'default' workspace.
  Workspace workspace = 3;
  // Properties must be specified in ExecutionType.
  map<string, Value> properties = 4;
  // Arbitrary user-provided properties that do not correspond to fields in the
  // schema for the execution type.
  map<string, Value> custom_properties = 5;
  // Arbitrary key-value pairs for labeling.
  map<string, string> labels = 6;
  // The time at which the execution was created. System-provided.
  google.protobuf.Timestamp create_time = 7;
  // The time at which the execution was last updated. System-provided.
  google.protobuf.Timestamp update_time = 8;
  // The time at which the execution was started.
  google.protobuf.Timestamp start_time = 9;
  // The time at which the execution ended.
  google.protobuf.Timestamp end_time = 10;
}


// *Value and *Type message types below are used to represent different types of
// values and value types respectively.

// Represents string types.
message StringType {
  // An optional OpenAPI-compatible field-validation schema for this field.
  string validator = 1;
}

// Represents integer types.
message IntType {
  // An optional OpenAPI-compatible field-validation schema for this field.
  string validator = 1;
}

// Represents double types.
message DoubleType {
  // An optional OpenAPI-compatible field-validation schema for this field.
  string validator = 1;
}

message StringValue {
  string value = 1;
}

message IntValue {
  int64 value = 1;
}

message DoubleValue {
  int64 value = 1;
}

// Type is the type of a field.
enum PropertyType {
  UNKNOWN = 0;
  INT = 1;
  DOUBLE = 2;
  STRING = 3;
    // TODO(neuromage): Add types to capture nested/complex object types.
}

// Value is the value of the field.
message Value {
  oneof value {
    int64 int_value = 1;
    double double_value = 2;
    string string_value = 3;
  }
}
